{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2024-03-06T10:07:11.947Z",
    "end": "2024-03-06T10:07:56.583Z",
    "duration": 44636,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "698a4549-72bc-4610-a961-53286850e4f9",
      "title": "",
      "fullFile": "cypress\\e2e\\CouponModule\\CouponTests.spec.js",
      "file": "cypress\\e2e\\CouponModule\\CouponTests.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b6b5d769-6bfa-4dee-a2fd-69cff913bbcb",
          "title": "Coupon Module Test Case Suite",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "tries to add start and end date to a coupon",
              "fullTitle": "Coupon Module Test Case Suite tries to add start and end date to a coupon",
              "timedOut": null,
              "duration": 24528,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n        function selectDayFromCurrent(day) {\n          let date = new Date()\n          date.setDate(date.getDate() + day)\n          let futureDay = date.getDate()\n          let futureMonth = date.toLocaleDateString('en-US', {month: 'numeric'})\n          futureMonth = futureMonth.padStart(2, '0');\n          let futureYear = date.getFullYear()\n          let dateToAssert = `${futureYear}-${futureMonth}-${futureDay}`\n          \n          cy.get('.today').invoke('attr', 'aria-label').then( dateAttribute => {\n            if(!dateAttribute.includes(futureMonth) || !dateAttribute.includes(futureYear)) {\n                cy.get('.flatpickr-next-month').click()\n                selectDayFromCurrent(day)\n            } else {\n              cy.get('.flatpickr-day').not('.prevMonthDay').not('.nextMonthDay').contains(futureDay).should('be.visible')\n              cy.get('.flatpickr-day').not('.prevMonthDay').not('.nextMonthDay').contains(futureDay).click()\n            }\n          })\n          return dateToAssert\n        }\n    \n        cy.contains(\"New Coupon\").click()\n    \n        cy.get('#start_date').then( input => {\n          cy.wrap(input).click()\n          const dateToAssert = selectDayFromCurrent(5)\n          cy.wrap(input).invoke('prop', 'value').should('contain', dateToAssert)\n          //or\n          cy.wrap(input).should('have.value', '2024-02-21')\n        })\n    \n        cy.get('#end_date').then( input => {\n          cy.wrap(input).click()\n          const dateToAssert = selectDayFromCurrent(6)\n          cy.wrap(input).invoke('prop', 'value').should('contain', dateToAssert)\n          //or\n          cy.wrap(input).should('have.value', '2024-02-26')\n        })\n        */\nfunction selectDayFromCurrent(day) {\n  let date = new Date();\n  date.setDate(date.getDate() + day);\n  let futureDay = date.getDate();\n  let futureMonth = date.toLocaleDateString('en-US', {\n    month: 'numeric'\n  });\n  let futureMonthLong = date.toLocaleDateString('en-US', {\n    month: 'long'\n  });\n  futureMonth = futureMonth.padStart(2, '0');\n  let futureYear = date.getFullYear();\n  let dateToAssert = `${futureYear}-${futureMonth}-${futureDay}`;\n  cy.get('.open').get('.today').invoke('attr', 'aria-label').then(dateAttribute => {\n    if (!dateAttribute.includes(futureMonthLong) || !dateAttribute.includes(futureYear)) {\n      cy.get('.flatpickr-next-month').click();\n      selectDayFromCurrent(day);\n    } else {\n      cy.get('span[class=\"flatpickr-day\"]').not('.prevMonthDay').not('.nextMonthDay').contains(futureDay).should('be.visible');\n      cy.get('.flatpickr-day').not('.prevMonthDay').not('.nextMonthDay').contains(futureDay).click();\n    }\n  });\n  return dateToAssert;\n}\ncy.contains(\"New Coupon\").click();\ncy.get('#start_date').click();\ncy.get('#start_date').then(input => {\n  cy.wrap(input).click();\n  const dateToAssert = selectDayFromCurrent(5);\n  cy.wrap(input).invoke('prop', 'value').should('contain', dateToAssert);\n  //sau\n  cy.wrap(input).should('have.value', '2024-03-11');\n});\n// cy.get('#end_date').then( input => {\n//   cy.wrap(input).click()\n//   const dateToAssert = selectDayFromCurrent(6)\n//   cy.wrap(input).invoke('prop', 'value').should('contain', dateToAssert)\n//   //sau\n//   cy.wrap(input).should('have.value', '2024-03-11')\n// })",
              "err": {},
              "uuid": "332bd75e-1d07-4600-8935-0b4b098f1db0",
              "parentUUID": "b6b5d769-6bfa-4dee-a2fd-69cff913bbcb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "tries to toggle the status, check the free shipping and select a discount type",
              "fullTitle": "Coupon Module Test Case Suite tries to toggle the status, check the free shipping and select a discount type",
              "timedOut": null,
              "duration": 19064,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.contains('New Coupon').click();\ncy.get('.toggle').should('have.class', 'enabled');\ncy.get('.toggle').click();\ncy.get('.toggle').should('not.have.class', 'enabled');\ncy.get('[type=\"checkbox\"]').should('not.be.checked');\ncy.get('[type=\"checkbox\"]').click({\n  force: true\n}); //or\ncy.get('[type=\"checkbox\"]').should('be.checked');\ncy.get('[type=\"checkbox\"]').check({\n  force: true\n});\ncy.contains('Discount Type').parent().parent().find('.radio-field').children().each((child, index) => {\n  cy.wrap(child).find('input').click({\n    force: true\n  });\n  cy.wrap(child).find('input').should('be.checked');\n});",
              "err": {},
              "uuid": "f7348052-0f4a-4ebb-9157-b5f4804c628f",
              "parentUUID": "b6b5d769-6bfa-4dee-a2fd-69cff913bbcb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "332bd75e-1d07-4600-8935-0b4b098f1db0",
            "f7348052-0f4a-4ebb-9157-b5f4804c628f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 43592,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/results/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}